 Importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.datasets import load_boston
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Load the Boston Housing dataset
# The Boston Housing dataset is available in sklearn's datasets module
boston = load_boston()
data = pd.DataFrame(boston.data, columns=boston.feature_names)
target = boston.target

# Step 2: Selecting features (you can customize this part based on your preferences)
# For simplicity, let's use a few features like CRIM (Crime Rate), RM (Average number of rooms), and LSTAT (Lower status population)
X = data[['CRIM', 'RM', 'LSTAT']]  # Features: Crime rate, Average number of rooms, and Lower status population
y = target  # Target: Housing prices

# Step 3: Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Creating and training the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 5: Making predictions on the test data
y_pred = model.predict(X_test)

# Step 6: Evaluating the model
mse = mean_squared_error(y_test, y_pred)  # Mean Squared Error
r2 = r2_score(y_test, y_pred)  # R-squared score

# Printing the results
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

# Step 7: Visualizing the results (Optional)
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Housing Prices')
plt.show()

# Step 8: Displaying the coefficients of the model
print("Model Coefficients:")
print(f"Intercept: {model.intercept_}")
print(f"Coefficients: {model.coef_}")
